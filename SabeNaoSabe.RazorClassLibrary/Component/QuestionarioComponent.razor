@using SabeNaoSabe.RazorClassLibrary.Component
@using SabeNaoSabe.RazorClassLibrary.Models
@using SabeNaoSabe.RazorClassLibrary.Services
@using Newtonsoft.Json


<AddButton Visible="@showAddButton" CreateUpdateQuestionarioClicked="QuestionarioCreateUpdate" ></AddButton>

<QuestionarioTable  Visible="@showQuestionarioTable" 
                    qList="@questionariosList"
                    DetailsClicked="DetailsQuestionario"
                    EditClicked="EditQuestionario"
                    DeleteClicked="DeleteQuestionario" />

<QuestionarioCreateUpdate Visible="@showQuestionarioCreateUpdate" QuestionarioModel="@QuestionarioModel" 
    SaveClicked="SavedClicked" CancelClicked="CanceledClicked" title="@strTitle"/>

<Confirm Visible="@showConfirm" QuestionarioModel="@QuestionarioModel"
         DeleteQuestionarioClicked="DeleteQuestionarioConfirm" 
         CancelQuestionarioClicked="CancelQuestionarioConfirm"/>

<QuestionarioDetails corpoList="@corpoList" BackClicked="CanceledClicked" QuestionarioModel="@QuestionarioModel" Title="@strTitle" Visible="@showQuestionarioDetails" />

@code {
    [Inject]
    public IQuestionarioService questionarioService { get; set; }
    [Parameter]
    public string baseUrl { get; set; }

    private bool showAddButton = true;
    private bool showQuestionarioTable = true;
    private bool showQuestionarioDetails = false;
    private bool showQuestionarioCreateUpdate = false;
    private bool showConfirm = false;
    private string strTitle;

    private  List<QuestionarioModel> questionariosList = new List<QuestionarioModel>();
    private QuestionarioModel QuestionarioModel = new QuestionarioModel();
    private List<Corpo> corpoList = new List<Corpo>();


    protected override async Task OnInitializedAsync()
    {
        questionariosList = await questionarioService.GetQuestionarios(baseUrl);
    }
    private void QuestionarioCreateUpdate()
    {
        strTitle = "Create";
        showAddButton = false;
        showQuestionarioTable = false;
        showQuestionarioCreateUpdate = true;
        showQuestionarioDetails = false;
        QuestionarioModel.Description = string.Empty;
        QuestionarioModel.Name = string.Empty;
        QuestionarioModel.Email = string.Empty;
        QuestionarioModel.Corpo = string.Empty;
    }
    private async void SavedClicked()
    {
        showAddButton = true;
        showQuestionarioTable = true;
        showQuestionarioCreateUpdate = false;

        if(QuestionarioModel.Id > 0)
        {
            await questionarioService.EditQuestionario(QuestionarioModel);
        }
        else
        {
            await questionarioService.AddQuestionario(QuestionarioModel);
        }
        await OnInitializedAsync();
        this.StateHasChanged();
    }
    private async void CanceledClicked()
    {
        showAddButton = true;
        showQuestionarioTable = true;
        showQuestionarioCreateUpdate = false;
        showQuestionarioDetails = false;

    }
    private async void DeleteQuestionario(QuestionarioModel questionarioModel)
    {
        strTitle = "Delete";
        showAddButton = false;
        showQuestionarioTable = false;
        showQuestionarioCreateUpdate = false;
        showQuestionarioDetails = false;
        showConfirm = true;
        QuestionarioModel = questionarioModel;
    }
    private async void DeleteQuestionarioConfirm(QuestionarioModel questionarioModel)
    {
        strTitle = "Delete";
        var quest = await questionarioService.DeleteQuestionario(questionarioModel);
        showAddButton = true;
        showQuestionarioTable = true;
        showQuestionarioCreateUpdate = false;
        showQuestionarioDetails = false;
        showConfirm = false;
        await OnInitializedAsync();
        this.StateHasChanged();
    }
    private async void EditQuestionario(QuestionarioModel questionarioModel)
    {
        strTitle = "Edit";
        showAddButton = false;
        showQuestionarioTable = false;
        showQuestionarioCreateUpdate = true;
        QuestionarioModel.Id = questionarioModel.Id;
        QuestionarioModel.Name = questionarioModel.Name;
        QuestionarioModel.Description = questionarioModel.Description;
        QuestionarioModel.Email = questionarioModel.Email;
        QuestionarioModel.Corpo = questionarioModel.Corpo;
    }
    private async void DetailsQuestionario(QuestionarioModel questionarioModel)
    {
        strTitle = "Details";
        showAddButton = false;
        showQuestionarioTable = false;
        showQuestionarioCreateUpdate = false;
        showQuestionarioDetails = true;
        QuestionarioModel = questionarioModel;
        string linesCorpo = questionarioModel.Corpo;
        string[] lines = linesCorpo.Split('\n');
        Corpo corpo = null;
        int token = 0;
        foreach (var line in lines)
        {
            switch (line)
            {
                case "[PU]":
                    token = 1;
                    break;
                case "[OP]":
                    token = 2;
                    break;
                case "[R]":
                    token = 3;
                    break;
                case "[E]":
                    token = 4;
                    break;
                case "[PM]":
                    token = 5;
                    break;
                default:
                    switch (token)
                    {
                        case 1:
                        case 5:
                            if(corpo != null)
                            {
                                corpoList.Add(corpo);
                            }
                            corpo = new Corpo();
                            corpo.Opcoes = new List<Opcao>();
                            if (token == 1)
                            {
                                corpo.Tipo = 1;
                            }
                            else
                            {
                                corpo.Tipo = 2;
                            }
                            corpo.Pergunta = line;
                            break;
                        case 2:
                            Opcao opcao = new Opcao();
                            opcao.Descricao = line;
                            corpo.Opcoes.Add(opcao);
                            break;
                        case 3:
                            corpo.Resposta = line;
                            break;
                        case 4:
                            corpo.Explicacao = line;
                            break;
                    }
                    break;
            }
        }
        if(corpo != null)
        {
            corpoList.Add(corpo);
        }
        this.StateHasChanged();
    }
    private async void BackClicked()
    {
        showAddButton = true;
        showQuestionarioTable = true;
        showQuestionarioCreateUpdate = false;
    }
    private async void CancelQuestionarioConfirm()
    {
        showAddButton = true;
        showQuestionarioTable = true;
        showQuestionarioCreateUpdate = false;
        showQuestionarioDetails = false;

        showConfirm = false;
        await OnInitializedAsync();
        this.StateHasChanged();
    }


}
