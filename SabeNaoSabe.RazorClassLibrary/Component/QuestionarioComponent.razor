@using SabeNaoSabe.RazorClassLibrary.Component
@using SabeNaoSabe.RazorClassLibrary.Models
@using SabeNaoSabe.RazorClassLibrary.Services
@using Newtonsoft.Json


<AddButton Visible="@showAddButton" CreateUpdateQuestionarioClicked="QuestionarioCreateUpdate" ></AddButton>

<QuestionarioTable  Visible="@showQuestionarioTable" 
                    qList="@questionariosList"
                    DetailsClicked="DetailsQuestionario"
                    EditClicked="EditQuestionario"
                    DeleteClicked="DeleteQuestionario" />

<QuestionarioCreateUpdate Visible="@showQuestionarioCreateUpdate" QuestionarioModel="@QuestionarioModel" 
    SaveClicked="SavedClicked" CancelClicked="CanceledClicked" title="@strTitle"/>

<Confirm Visible="@showConfirm" QuestionarioModel="@QuestionarioModel"
         DeleteQuestionarioClicked="DeleteQuestionarioConfirm" 
         CancelQuestionarioClicked="CancelQuestionarioConfirm"/>

<QuestionarioDetails BackClicked="CanceledClicked" QuestionarioModel="@QuestionarioModel" Title="@strTitle" Visible="@showQuestionarioDetails" />

@code {
    [Inject]
    public IQuestionarioService questionarioService { get; set; }
    [Parameter]
    public string baseUrl { get; set; }

    private bool showAddButton = true;
    private bool showQuestionarioTable = true;
    private bool showQuestionarioDetails = false;
    private bool showQuestionarioCreateUpdate = false;
    private bool showConfirm = false;
    private string strTitle;

    private  List<QuestionarioModel> questionariosList = new List<QuestionarioModel>();
    private QuestionarioModel QuestionarioModel = new QuestionarioModel();

    protected override async Task OnInitializedAsync()
    {
        questionariosList = await questionarioService.GetQuestionarios(baseUrl);
    }
    private void QuestionarioCreateUpdate()
    {
        strTitle = "Create";
        showAddButton = false;
        showQuestionarioTable = false;
        showQuestionarioCreateUpdate = true;
        showQuestionarioDetails = false;
        QuestionarioModel.Description = string.Empty;
        QuestionarioModel.Name = string.Empty;
        QuestionarioModel.Email = string.Empty;
        QuestionarioModel.Corpo = string.Empty;
    }
    private async void SavedClicked()
    {
        showAddButton = true;
        showQuestionarioTable = true;
        showQuestionarioCreateUpdate = false;

        if(QuestionarioModel.Id > 0)
        {
            await questionarioService.EditQuestionario(QuestionarioModel);
        }
        else
        {
            await questionarioService.AddQuestionario(QuestionarioModel);
        }
        await OnInitializedAsync();
        this.StateHasChanged();
    }
    private async void CanceledClicked()
    {
        showAddButton = true;
        showQuestionarioTable = true;
        showQuestionarioCreateUpdate = false;
        showQuestionarioDetails = false;

    }
    private async void DeleteQuestionario(QuestionarioModel questionarioModel)
    {
        strTitle = "Delete";
        showAddButton = false;
        showQuestionarioTable = false;
        showQuestionarioCreateUpdate = false;
        showQuestionarioDetails = false;
        showConfirm = true;
        QuestionarioModel = questionarioModel;
    }
    private async void DeleteQuestionarioConfirm(QuestionarioModel questionarioModel)
    {
        strTitle = "Delete";
        var quest = await questionarioService.DeleteQuestionario(questionarioModel);
        showAddButton = true;
        showQuestionarioTable = true;
        showQuestionarioCreateUpdate = false;
        showQuestionarioDetails = false;
        showConfirm = false;
        await OnInitializedAsync();
        this.StateHasChanged();
    }
    private async void EditQuestionario(QuestionarioModel questionarioModel)
    {
        strTitle = "Edit";
        showAddButton = false;
        showQuestionarioTable = false;
        showQuestionarioCreateUpdate = true;
        QuestionarioModel.Id = questionarioModel.Id;
        QuestionarioModel.Name = questionarioModel.Name;
        QuestionarioModel.Description = questionarioModel.Description;
        QuestionarioModel.Email = questionarioModel.Email;
        QuestionarioModel.Corpo = questionarioModel.Corpo;
    }
    private async void DetailsQuestionario(QuestionarioModel questionarioModel)
    {
        strTitle = "Details";
        var quest = await questionarioService.GetQuestionarioById(questionarioModel.Id);
        showAddButton = false;
        showQuestionarioTable = false;
        showQuestionarioCreateUpdate = false;
        showQuestionarioDetails = true;

        string linesCorpo = questionarioModel.Corpo;

        string[] lines = linesCorpo.Split('\n');

        List<Corpo> corpoList = new List<Corpo>();
        Corpo corpo = new Corpo();
        corpo.Opcoes = new List<Opcao>();
        int token = 0;
        int tokenAnterior = 0;

        foreach (var line in lines)
        {
            token = 0;
            switch (line)
            {
                case "[PU]":
                    token = 1;
                    tokenAnterior = token;
                    break;
                case "[OP]":
                    token = 2;
                    tokenAnterior = token;
                    break;
                case "[R]":
                    token = 3;
                    tokenAnterior = token;
                    break;
                case "[E]":
                    token = 4;
                    tokenAnterior = token;
                    break;
            }
            if(token == 0)
            {
                switch (tokenAnterior)
                {
                    case 1:
                        corpo.Pergunta = line;
                        break;
                    case 2:
                        Opcao opcao = new Opcao();
                        opcao.Descricao = line;
                        corpo.Opcoes.Add(opcao);
                        break;
                    case 3:
                        corpo.Resposta = line;
                        break;
                    case 4:
                        corpo.Explicacao = line;
                        Corpo corpox = new Corpo();
                        corpox = corpo;
                        corpoList.Add(corpox);
                        break;
                }
            }
        }
        this.StateHasChanged();
    }
    private async void BackClicked()
    {
        showAddButton = true;
        showQuestionarioTable = true;
        showQuestionarioCreateUpdate = false;
    }
    private async void CancelQuestionarioConfirm()
    {
        showAddButton = true;
        showQuestionarioTable = true;
        showQuestionarioCreateUpdate = false;
        showQuestionarioDetails = false;

        showConfirm = false;
        await OnInitializedAsync();
        this.StateHasChanged();
    }


}
