@using Microsoft.AspNetCore.Components.Forms
@using SabeNaoSabe.RazorClassLibrary.Models
@using System.Net.Http.Json


@if (Visible)
{
    <div class="container">
        <h4>@Title</h4>
        <EditForm Model="QuestionarioModel" enctype="multipart/form-data" OnValidSubmit="CreateUpdateQuestionario1">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="form-group">
                <label form="name">Nome:</label>
                <InputText id="name" @bind-Value="QuestionarioModel.Name" class="form-control"></InputText>
                <ValidationMessage For="@(()=>QuestionarioModel.Name)"></ValidationMessage>
            </div>
            <div class="form-group">
                <label form="description">Descrição:</label>
                <InputText id="description" @bind-Value="QuestionarioModel.Description" class="form-control"></InputText>
                <ValidationMessage For="@(()=>QuestionarioModel.Description)"></ValidationMessage>
            </div>
            <div class="form-group">
                <label form="email">E-mail:</label>
                <InputText id="email" @bind-Value="QuestionarioModel.Email" class="form-control"></InputText>
                <ValidationMessage For="@(()=>QuestionarioModel.Email)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label form="corpo">Corpo</label>
                <InputTextArea id="corpo" @bind-Value="QuestionarioModel.Corpo" class="form-control"></InputTextArea>
                <ValidationMessage For="@(()=>QuestionarioModel.Corpo)"></ValidationMessage>
            </div>

            <InputFile OnChange="OnInputFileChange" multiple />

            <p>@Message</p>
            <button type="submit" class="btn btn-primary m-md-1">Save</button>
            <button class="btn btn-primary m-md-1" @onclick="CancelQuestionario">Cancel</button>
        </EditForm>
    </div>
}

@code {
    [Parameter]
    public bool Visible { get; set; }
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public QuestionarioModel QuestionarioModel { get; set; } = new QuestionarioModel();
    [Parameter]
    public EventCallback<List<UploadedFile>> SaveClicked { get; set; }
    [Parameter]
    public EventCallback CancelClicked { get; set; }

    public IReadOnlyList<IBrowserFile> selectedFiles { get; set; }

    String baseUrl = "http://localhost:5052/api/questionarios";
    public string Message;

    public List<UploadedFile> uploadedFiles = new List<UploadedFile>();

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
    }
    private async Task CreateUpdateQuestionario1()
    {
        uploadedFiles.Clear();
        if(selectedFiles != null)
        {
            int i = 0;
            foreach (var file in selectedFiles)
            {
                try
                {
                    Stream stream = file.OpenReadStream();
                    MemoryStream ms = new MemoryStream();
                    await stream.CopyToAsync(ms);
                    stream.Close();

                    UploadedFile uploadedFile = new UploadedFile();
                    uploadedFile.FileName = file.Name;
                    uploadedFile.FileContent = ms.ToArray();
                    i++;
                    uploadedFile.Id = i.ToString();
                    ms.Close();

                    uploadedFiles.Add(uploadedFile);
                }
                catch (Exception e)
                {
                    string m = e.Message;
                }
            }
        }
        if (Title == "Create") QuestionarioModel.Id = 0;
        await SaveClicked.InvokeAsync(uploadedFiles);
    }
    private async Task CancelQuestionario()
    {
        QuestionarioModel = new();
        await CancelClicked.InvokeAsync(QuestionarioModel);
    }
}
